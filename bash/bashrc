# Variables
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"

export CARGO_HOME="$XDG_DATA_HOME/cargo"
export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"
export RUSTUP_HOME="$XDG_DATA_HOME/rustup"
export GOPATH="$XDG_DATA_HOME/go"
export CUDA_CACHE_PATH="$XDG_CACHE_HOME/nv"
export HISTFILE="$XDG_STATE_HOME/bash/history"

if [[ $(which bat) != "" ]]; then
	export PAGER="bat -p"
fi
export BAT_THEME="Dracula"
export CC="clang"
export CXX="clang++"
if [[ $(which nvim) != "" ]]; then
	export EDITOR="nvim"
fi
if [[ $(which ninja) != "" ]]; then
	export CMAKE_GENERATOR="Ninja"
fi
export PF_INFO="ascii title host kernel os shell uptime memory wm palette"
export EXA_COLORS="da=35"

export PATH="${PATH:+${PATH}:}$HOME/.local/bin:$CARGO_HOME/bin:$GOPATH/bin"

# Dracula theme for Linux TTY
if [ "$TERM" = "linux" ]; then
	printf %b '\e[40m' '\e[8]'
	printf %b '\e[37m' '\e[8]'
	printf %b '\e]P0282a36'
	printf %b '\e]P86272a4'
	printf %b '\e]P1ff5555'
	printf %b '\e]P9ff7777'
	printf %b '\e]P250fa7b'
	printf %b '\e]PA70fa9b'
	printf %b '\e]P3f1fa8c'
	printf %b '\e]PBffb86c'
	printf %b '\e]P4bd93f9'
	printf %b '\e]PCcfa9ff'
	printf %b '\e]P5ff79c6'
	printf %b '\e]PDff88e8'
	printf %b '\e]P68be9fd'
	printf %b '\e]PE97e2ff'
	printf %b '\e]P7f8f8f2'
	printf %b '\e]PFffffff'
	clear
fi

# Completions
complete -cf doas

# Better autocomplete
bind -s 'set completion-ignore-case on'
bind "set show-all-if-ambiguous on"
bind "TAB:menu-complete"

# Aliases/functions
if [[ $(which bat) != "" ]]; then
	cat() {
		bat -p $@
	}
fi
cheat() {
	curl -sL "cht.sh/$1"
}
connect() {
	iwctl station $1 connect $2
}
crypto() {
	curl -sL "rate.sx/$1"
}
dad() {
	curl -sL "https://icanhazdadjoke.com"
}
if [[ $(which duf) != "" ]]; then
	df() {
		duf $@
	}
fi
if [[ $(which ds) != "" ]]; then
	du() {
		ds $@
	}
fi
dict() {
	curl -sL "dict://dict.org/d:$1"
}
disconnect() {
	iwctl station $1 disconnect
}
if [[ $(which fd) != "" ]]; then
	find() {
		fd $@
	}
fi
gitignore() {
	curl -sL "gitignore.io/api/$1"
}
if [[ $(which rg) != "" ]]; then
	grep() {
		rg $@
	}
fi
if [[ $(which exa) != "" ]]; then
	ls() {
		exa -a --group-directories-first $@
	}
	ll() {
		exa -la --group-directories-first $@
	}
fi
if [[ $(which batman) != "" ]]; then
	man() {
		batman $@
	}
fi
parrot() {
	curl -sL "parrot.live"
}
paru() {
	if [[ $@ = "" ]]; then
		paru -Syu
	else
		$(which paru) --bottomup $@
	fi
}
pkgclean() {
	paru -c && paru -Sc && paccache -r
}
pubip() {
	curl -sL "ifconfig.co/$1"
}
if [[ $(which htop) != "" ]]; then
	top() {
		htop $@
	}
fi
if [[ $(which nvim) != "" ]]; then
	vim() {
		nvim $@
	}
fi
weather() {
	curl -sL "wttr.in/$1"
}

# My custom prompt
export PS1="\[\033[01;38;5;13m\][\[$(tput sgr0)\]\[\033[01;38;5;10m\]\u\[$(tput sgr0)\]\[\033[01;38;5;13m\]@\[$(tput sgr0)\]\[\033[01;38;5;14m\]\h\[$(tput sgr0)\] \[$(tput sgr0)\]\[\033[01;38;5;11m\]\w\[$(tput sgr0)\]\[\033[01;38;5;13m\]]\[$(tput sgr0)\] \[$(tput sgr0)\]\[\033[01;38;5;9m\]\$?\[$(tput sgr0)\]\[$(tput bold)\]\\$\[$(tput sgr0)\] \[$(tput sgr0)\]"

# It's better than Neofetch (:
pfetch
